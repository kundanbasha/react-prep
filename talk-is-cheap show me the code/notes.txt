// talk is cheap, show me the code
1. Plan before start development. plan means explore about the project and design.
2. build wireframes of a project.
3. findout the components in components
   Header
    - Logo
    - Nav items
   Body
    - Search
    - RestaurentContainer
      - Restaurent card
   Footer
    - Copyright
    - Links
    - Address
    - Contact
4. what are props?
5. passing a props to component is nothing but passing argument to a function.
6. what is config-driven ui?
7. why do have to use a key while iterating a list? ref: https://legacy.reactjs.org/docs/reconciliation.html#recursing-on-children
8. never use index as key, why? ref: https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/

// Lets get hooked
1. Separate files for separate components --> best practice in industry
2. There is specific folder structure to follow, it's up to developers.
3. Never ever create hardcoded data inside component, keep it in separate file or folder.
4. Two types of exports, default export and named export.
5. Module can't have multiple default exports.
6. Can I use named export along with default export?
7. Hooks are nothing but normal js utility functions. eg: useState(), useEffect()
8. local state variable: scope of the variable is inside that component/funtion.
9. react will make the dom operations super fast and efficient.
10. in react Ui layer is synced with the data layer, when ever any change happens in the state variable, it will re-render the component.
11. what is reconciliation algorithm? it is also know as react-fiber.
12. react uses reconciliation algo.
13. what is virtual dom?
14. virtual dom is a representation of actual dom.
15. virtual dom is nothing but a normal js object.
16. what is diff algo?
17. react find out the difference bwtween two virtual doms using diff algo and update the dom.
18. what is react-fiber? ref: https://github.com/acdlite/react-fiber-architecture
19. what react is so fast? because it is doing efficient dom manupulations.
20. useState returns an array. eg: const arr=useState();
21. whenever we trigger/call arr[1] react starts the diff algo and re-render the component;

// Exploring the world
1. what is Monolith architecture?
2. what is micro-service architecture?
3. Monolith vs micro-service?
4. Single responsibility principle?
5. Seperation of concerns?
6. how services will interact with each other in micro-service architecture?
7. two ways we usually follow to fetch the data and render the ui.
   i. Page loads --> API(takes 500ms) --> Render Ui
   ii. Page loads --> Render(skeleton or any data we have) --> API(takes 500ms) --> Render Ui
8. useEffect is nothing but a normal js function.
9. useEffect callback will be called after component renders.
10. What is CORS policy? browser will block if we have a origin mismatch. ref: https://www.youtube.com/watch?v=tcLW5d0KAYE&ab_channel=AkshaySaini
11. what is Optional chaining?
12. what is condition rendering?
13. Ternary operator?
14. Why we use react state variable instead normal js variable?
15. https://corsproxy.io/
16.

//Finding the path
1. react-router-dom?
2. createBrowserRouter takes all the possible routes in a list of objects.
3. each object indicates a page, which takes a path, element, exact properties
4. to render all the rounder on the browsers, react router dom gives a component called RouterProvider.
5. useRouteError is given by react-router-dom. which gives more details about the error.
6. don't use <a></a> tag to navigate when we have react-router-dom, because <a></a> reloads the whole page while navigate.
7. use <Link/> component instead of <a></a>, because Link component don't reload the page, it just refresh/changes the component.
8. what is SPA(single page application)?
9. Two types of routing, Client side routing and server side routing.
10. useParams given by react-router-dom, to capture params from url.
11. ErrorElement in react-router-dom?

//Bonus: useMemo, useCallaback and useRef
1. useMemo: 

//optimizing your application
1. use custom hooks to make our code reusable, maintable and testable.
2. use custom hooks to reuse component state logic in a separate function and use it whereever it requires.
3. code splitting/chunking/dynamic import/on demand loading/lazy loading/dynamic bundling
4. lazy function from react.
5. Suspence componet of react.

//Data is the new oil 
1. what are Higher order components(HOC)?
2. 